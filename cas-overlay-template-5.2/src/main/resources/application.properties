##
# CAS Server Context Configuration
#
#server.context-path=/cas
#server.port=8080

cas.server.name=http://192.168.7.127:8080
cas.server.prefix=${cas.server.name}/cas

cas.adminPagesSecurity.ip=127.0.0.1

logging.config=classpath:log4j2.xml

cas.serviceRegistry.initFromJson=true

#server.ssl.key-store=file:/etc/cas/thekeystore
#server.ssl.key-store-password=changeit
#server.ssl.key-password=changeit
# server.ssl.ciphers=
# server.ssl.client-auth=
# server.ssl.enabled=
# server.ssl.key-alias=
# server.ssl.key-store-provider=
# server.ssl.key-store-type=
# server.ssl.protocol=
# server.ssl.trust-store=
# server.ssl.trust-store-password=
# server.ssl.trust-store-provider=
# server.ssl.trust-store-type=

##server.max-http-header-size=2097152
##server.use-forward-headers=true
##server.connection-timeout=20000
##server.error.include-stacktrace=ALWAYS
##
##server.compression.enabled=true
##server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain
##
##server.tomcat.max-http-post-size=2097152
##server.tomcat.basedir=build/tomcat
##server.tomcat.accesslog.enabled=true
##server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
##server.tomcat.accesslog.suffix=.log
##server.tomcat.max-threads=10
##server.tomcat.port-header=X-Forwarded-Port
##server.tomcat.protocol-header=X-Forwarded-Proto
##server.tomcat.protocol-header-https-value=https
##server.tomcat.remote-ip-header=X-FORWARDED-FOR
##server.tomcat.uri-encoding=UTF-8

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

##
# CAS Cloud Bus Configuration
#
spring.cloud.bus.enabled=false
# spring.cloud.bus.refresh.enabled=true
# spring.cloud.bus.env.enabled=true
# spring.cloud.bus.destination=CasCloudBus
# spring.cloud.bus.ack.enabled=true

endpoints.enabled=false
endpoints.sensitive=true

endpoints.restart.enabled=false
endpoints.shutdown.enabled=false

management.security.enabled=true
management.security.roles=ACTUATOR,ADMIN
management.security.sessions=if_required
management.context-path=/status
management.add-application-context-header=false

security.basic.authorize-mode=role
security.basic.enabled=false
security.basic.path=/cas/status/**

##
# CAS Web Application Session Configuration
#
server.session.timeout=300
server.session.cookie.http-only=true
server.session.tracking-modes=COOKIE

##
# CAS Thymeleaf View Configuration
#
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=true
spring.thymeleaf.mode=HTML
##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS AspectJ Configuration
#
spring.aop.auto=true
spring.aop.proxy-target-class=true


##
# CAS Authentication Credentials
#
#cas.authn.accept.users=casuser::Mellon


#cas.authn.attributeRepository.stub.attributes.username=username
#cas.authn.attributeRepository.stub.attributes.realname=realname
#cas.authn.attributeRepository.stub.attributes.email=email
#cas.authn.attributeRepository.stub.attributes.company=company

#Query Database Authentication 数据库查询校验用户名开始
#查询账号密码sql，必须包含密码字段
cas.authn.jdbc.query[0].sql=select * from t_user where username=? and company=?
#指定上面的sql查询字段名（必须）
cas.authn.jdbc.query[0].fieldPassword=password
#指定过期字段，1为过期，若过期不可用
cas.authn.jdbc.query[0].fieldExpired=expired
#为不可用字段段，1为不可用，需要修改密码
cas.authn.jdbc.query[0].fieldDisabled=disabled
#数据库方言hibernate的知识
cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.MySQLDialect
#数据库驱动
cas.authn.jdbc.query[0].driverClass=com.mysql.jdbc.Driver
#数据库连接
cas.authn.jdbc.query[0].url=jdbc:mysql://192.168.1.105:3306/cas5?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
#数据库用户名
cas.authn.jdbc.query[0].user=root
#数据库密码
cas.authn.jdbc.query[0].password=123456
#默认加密策略，通过encodingAlgorithm来指定算法，默认NONE不加密
#cas.authn.jdbc.query[0].passwordEncoder.type=DEFAULT
cas.authn.jdbc.query[0].passwordEncoder.type=com.uusafe.cas.CustomPasswordEncoder
cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8
cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=MD5
#cas.authn.jdbc.query[0].principalAttributeList=company,username,realname,email
#Query Database Authentication 数据库查询校验用户名结束



#配置多属性返回
#----------------------单列值情况----------------------------
#定义三个属性的单列
cas.authn.attributeRepository.jdbc[0].attributes.id=id
cas.authn.attributeRepository.jdbc[0].attributes.username=username
cas.authn.attributeRepository.jdbc[0].attributes.company=company
cas.authn.attributeRepository.jdbc[0].attributes.email=email
cas.authn.attributeRepository.jdbc[0].attributes.password=password
cas.authn.attributeRepository.jdbc[0].attributes.realname=realname
#设置数据为单行的情况
cas.authn.attributeRepository.jdbc[0].singleRow=true
cas.authn.attributeRepository.jdbc[0].order=0
cas.authn.attributeRepository.jdbc[0].url=${cas.authn.jdbc.query[0].url}
# 以下属性为查询sql时，当为多个时逗号分隔，如填写username、email,sql会变成 select * from sys_user where username=${?} {and/or} email=${?}
#cas.authn.attributeRepository.jdbc[0].username=username,company
#cas.authn.attributeRepository.jdbc[0].queryType=AND
#这个相当于查询的sql,设定查询的字段
#select * from yellowcong_users where username = ?
cas.authn.attributeRepository.jdbc[0].username=username
#多个属性的情况
cas.authn.attributeRepository.jdbc[0].user=${cas.authn.jdbc.query[0].user}
cas.authn.attributeRepository.jdbc[0].password=${cas.authn.jdbc.query[0].password}
#这个地方的{0} 就是  cas.authn.attributeRepository.jdbc[0].username  对于的查询条件
cas.authn.attributeRepository.jdbc[0].sql=select * from t_user where {0}
cas.authn.attributeRepository.jdbc[0].dialect=${cas.authn.jdbc.query[0].dialect}
cas.authn.attributeRepository.jdbc[0].ddlAuto=none
cas.authn.attributeRepository.jdbc[0].driverClass=${cas.authn.jdbc.query[0].driverClass}
cas.authn.attributeRepository.jdbc[0].leakThreshold=10
cas.authn.attributeRepository.jdbc[0].propagationBehaviorName=PROPAGATION_REQUIRED
cas.authn.attributeRepository.jdbc[0].batchSize=1
cas.authn.attributeRepository.jdbc[0].failFast=true
#----------------------单列值情况----------------------------




#=========Database Service Registry==========#
cas.serviceRegistry.jpa.healthQuery=SELECT 1
cas.serviceRegistry.jpa.isolateInternalQueries=false
cas.serviceRegistry.jpa.url=${cas.authn.jdbc.query[0].url}
cas.serviceRegistry.jpa.failFastTimeout=1
cas.serviceRegistry.jpa.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
cas.serviceRegistry.jpa.leakThreshold=10
cas.serviceRegistry.jpa.batchSize=1
cas.serviceRegistry.jpa.user=${cas.authn.jdbc.query[0].user}
cas.serviceRegistry.jpa.ddlAuto=none
cas.serviceRegistry.jpa.password=${cas.authn.jdbc.query[0].password}
cas.serviceRegistry.jpa.autocommit=false
cas.serviceRegistry.jpa.driverClass=com.mysql.cj.jdbc.Driver
cas.serviceRegistry.jpa.idleTimeout=5000
cas.serviceRegistry.jpa.dataSourceName=
cas.serviceRegistry.jpa.dataSourceProxy=false
# Hibernate-specific properties (i.e. `hibernate.globally_quoted_identifiers`)
#cas.serviceRegistry.jpa.properties.propertyName=propertyValue
cas.serviceRegistry.jpa.pool.suspension=false
cas.serviceRegistry.jpa.pool.minSize=6
cas.serviceRegistry.jpa.pool.maxSize=18
cas.serviceRegistry.jpa.pool.maxWait=2000

#############################
#
##密码管理开始
cas.authn.pm.enabled=true

#发送邮件
spring.mail.host=smtp.exmail.qq.com
spring.mail.port=465
spring.mail.username=zengzhixiong@zhizhangyi.com
#邮箱授权码(qq授权码)
spring.mail.password=GekEvcwGoBJzqDhg
spring.mail.testConnection=false
spring.mail.properties.mail.smtp.auth=true

#必须ssl
spring.mail.properties.mail.smtp.ssl.enable=true
cas.authn.pm.reset.from=${spring.mail.username}
#发送邮件标题
cas.authn.pm.reset.subject=\u0043\u0041\u0053\u002d\u0053\u0065\u0072\u0076\u0065\u0072\u0020\u91cd\u7f6e\u5bc6\u7801
#邮件内容，必须要有%s，因为会生成一个连接并且带了token，否则无法打开链接，当然这个链接也和cas.server.prefix有关系
cas.authn.pm.reset.text=\u6253\u5f00\u4ee5\u4e0b\u94fe\u63a5\u91cd\u7f6e\u60a8\u7684\u5bc6\u7801\u0020\u0028\u6765\u81ea\u0043\u0041\u0053\u002d\u0053\u0065\u0072\u0076\u0065\u0072\u0029: %s
#token失效分钟数
cas.authn.pm.reset.expirationMinutes=10
cas.authn.pm.reset.emailAttribute=email
#新密码必须匹配表达式
cas.authn.pm.policyPattern=\\w{6,24}
#邮箱查找
#根据用户名查找邮箱
cas.authn.pm.jdbc.sqlFindEmail=SELECT email FROM t_user WHERE company = ? AND username = ?
#修改密码
cas.authn.pm.jdbc.sqlChangePassword=update t_user set password=? where username=?  
cas.authn.pm.jdbc.url=${cas.authn.jdbc.query[0].url}
cas.authn.pm.jdbc.user=${cas.authn.jdbc.query[0].user}
cas.authn.pm.jdbc.password=${cas.authn.jdbc.query[0].password}
cas.authn.pm.jdbc.dialect=org.hibernate.dialect.MySQL5Dialect
cas.authn.pm.jdbc.driverClass=com.mysql.cj.jdbc.Driver
#密码修改加密规则，这个必须要和原始密码加密规则一致
cas.authn.pm.jdbc.passwordEncoder.type=com.uusafe.cas.CustomPasswordEncoder
cas.authn.pm.jdbc.passwordEncoder.characterEncoding=UTF-8
cas.authn.pm.jdbc.passwordEncoder.encodingAlgorithm=MD5
#默认是false，不会提交update语句
cas.authn.pm.jdbc.autocommit=true


#是否开启问题回答
cas.authn.pm.reset.securityQuestionsEnabled=true
#根据用户名查找问题
cas.authn.pm.jdbc.sqlSecurityQuestions=select question, answer from t_user_question where username=?

#############################


#Decides whether SSO cookie should be created only under secure connections
tgc.secure=false
#Decides whether SSO Warning cookie should be created only under secure connections
warn.cookie.secure=false